<div>
    <div>
        <div class="d-flex justify-content-between">
            <h2 class="card-header">
                <a href="{{ url('admin/pages') }}"> Pages </a> / {{ $heading }}
            </h2>
        </div>
    </div>
    <div class="row">
        <div class="col-xl">
            <div class="card mb-4">
                <form wire:submit.prevent="store">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-12">
                                <div class="mb-3">
                                    <label class="form-label">
                                        How to Download YouTube videos? <span class="text-danger"> * </span>
                                        @error('how_to_download_content')
                                            <span class="text-danger error-message">{{ $message }}</span>
                                        @enderror
                                    </label>
                                    <textarea class="form-control" id="ck_one" name="how_to_download_content" wire:model="how_to_download_content"
                                        rows="3"></textarea>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <div class="mb-3">
                                    <label class="form-label">
                                        Why use our Online YouTube Downloader? <span class="text-danger"> * </span>
                                        @error('why_use_content')
                                            <span class="text-danger error-message">{{ $message }}</span>
                                        @enderror
                                    </label>
                                    <textarea class="form-control" id="ck_two" wire:model="why_use_content" rows="3"></textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </form>
            </div>
        </div>
    </div>


    {{-- <script>
        window.addEventListener('swal:modal', event => {
            swal({
                title: event.detail.message,
                icon: event.detail.type,
            });
        });
    </script>

    <script>
        let settings = {
            toolbar: ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList',
                'blockQuote'
            ],
            heading: {
                options: [{
                        model: 'paragraph',
                        title: 'Paragraph',
                        class: 'ck-heading_paragraph'
                    },
                    {
                        model: 'heading1',
                        view: 'h1',
                        title: 'Heading 1',
                        class: 'ck-heading_heading1'
                    },
                    {
                        model: 'heading2',
                        view: 'h2',
                        title: 'Heading 2',
                        class: 'ck-heading_heading2'
                    }
                ]
            }
        }

        ClassicEditor
            .create(document.querySelector('#ck_one'))
            .then(editor => {
                editor.model.document.on('change:data', () => {
                    alert(editor.getData());
                    @this.set('how_to_download_content', editor.getData());
                })
            })
            .catch(error => {
                console.error(error);
            });
    </script> --}}

</div>

@section('script')
    <script>
        window.addEventListener('swal:modal', event => {
            swal({
                title: event.detail.message,
                icon: event.detail.type,
            });
        });

        ClassicEditor
            .create(document.querySelector('#ck_one'))
            .then(editor => {
                editor.model.document.on('change:data', () => {
                    @this.set('how_to_download_content', editor.getData());
                })
            })
            .catch(error => {
                console.error(error);
            });
    </script>
@endsection

{{-- @section('script')
    <script>
        window.addEventListener('swal:modal', event => {
            swal({
                title: event.detail.message,
                icon: event.detail.type,
            });
        });
    </script>

    <script>
        let settings = {
            toolbar: ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList',
                'blockQuote'
            ],
            heading: {
                options: [{
                        model: 'paragraph',
                        title: 'Paragraph',
                        class: 'ck-heading_paragraph'
                    },
                    {
                        model: 'heading1',
                        view: 'h1',
                        title: 'Heading 1',
                        class: 'ck-heading_heading1'
                    },
                    {
                        model: 'heading2',
                        view: 'h2',
                        title: 'Heading 2',
                        class: 'ck-heading_heading2'
                    }
                ]
            }
        }

        ClassicEditor
            .create(document.querySelector('#ck_one'))
            .then(editor => {
                editor.model.document.on('change:data', () => {
                    alert(editor.getData());
                    @this.set('how_to_download_content', editor.getData());
                })
            })
            .catch(error => {
                console.error(error);
            });

        // ClassicEditor
        //     .create(document.querySelector('#ck_two'))
        //     .then(editor => {
        //         editor.model.document.on('change:data', () => {
        //             @this.set('why_use_content', editor.getData());
        //         })
        //     })
        //     .catch(error => {
        //         console.error(error);
        //     });

        // Livewire.on('ckeditorLoaded', function() {
        //     ClassicEditor
        //         .create(document.querySelector('#ck_one'), settings)
        //         .then(sideeditor => {

        //             let ckeditor;
        //             ckeditor = sideeditor;
        //             ckeditor.model.document.on('change:data', () => {
        //                 console.log(ckeditor.getData())
        //                 // @this.set('side_effects', ckeditor.getData());
        //             })
        //         })
        //         .catch(error => {
        //             console.error(error);
        //         });
        // });
    </script>
@endsection --}}
